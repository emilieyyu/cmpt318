delay and can immediately of updates also a common disadvantage updated
 To design or reply to the request of CScAsr when a sender generates bursts pattern the advantage over ABCAST is even greater
 On the part of the table being it is not hard to using CBCAST is that the sender needs mutual exclusion our experience suggests that if mutual exclusion A single locking
 However applications have strong benefits may suffice to have this property
 Operation for a whole series structuring the data of multicasts and in some case locking can be entirely avoided just by the appropriate application itself
 This translates to a huge benefit for many asynchronous presented in BSS91 
 The distinction settings between causal and total event orderings system as seen in the performance
 CBCAST and ABCAST have parallels a causal delivery ordering in other as part of
 Although Isis was the first distributed to enforce Isis applications locks are used primarily for mutual exclusion on possibly conflicting operations such as updates on related data items
 In the case of replicated data this results in an algorithm similar to primary copy update in which the primary copy changes dynamically
 The execution model is non transactional thesis no need for read locks or for two phase locking rule
 This is discussed further in Sec
 7
19 a communication time
 Moreover subsystem Bir85 
 the approach draws on Lampon s respects anticipated prior work on logical notions of replication the approach BHG87 
 was in some Similarly software by work on primary copy both to Lamport s in database approach systems close synchrony is related state machine discussed to developing distributed SclO0 architecture and to the database serializability has yielded a memory model further below
 Work on a parallel processor update model called weak in the cache DSB86 TH90 which uses a causal dependency and a causal ABHN91 principle to increase the parallelism of a parallel processor memory discussion multiprocessors property has been used in work on lazy database systems JB89 LLS90 
 A more detailed in Sch88 BJ89 and distribution of the conditions under which can be used in place of AI Vr
 Summary of benefits due to virtual synchrony
 Brevity precludes algorithms a more detailed discussion of virtual synchrony or how it is used in developing the benefits of the model distributed within Isis
 However it may be useful to summarize
 Allows code to be developed supports a meaningful assuming a simplified closely synchronous execution model
 Replicated notion of group state and state transfer both when groups manage is dynamically partitioned among group members
 Data and when a computation asynchronous treatment pipelined communication process group membership changes and failures through a single of communication execution model
 Event oriented failures handling through a consistent subsystem
 This is in contrast presented system membership list integrated with the communication to the usual approach of sensing failures through timeouts and channels breaking which would not guarantee consistency
 The approach also has limitations reduced availability during LAN partition failures
 Only allows progress in a single partition and requires that a majority of sites be available in that partition risks incorrectly classifying an operational site or process as faulty
 The virtual synchrony theoretical model is unusual in offering these benefits within a single framework
Moreover evade arguments exist that no system that provides consistency
 Our experience distributed behavior can completely these limitations has been that the issues addressed
 Applications and that the approach by virtual synchrony is general complete are encountered and theoretically in even the simplest distributed system
 The Isis toolkit provides a collection and implementing group based of higher level for forming and managing process groups of the approach by discussing of a distributed database software
 This section illustrates the specifics the styles of group supported by the system and giving application
 A simple example Isis is not the first system to use process groups as programmers developed
 Cheriton s V system had received wide visibility CZ83 
 More recently group mechanisms the Chorus operating system become common exemplified by the Ameoba system KTHB89 system developed RAA 88 IBM s AAS the Psync system PBS 9 system CDg0 a high availability by Ladin and Liskov LLSg0 and Transis ADKM91 
 Nonetheless solutions Isis was first to propose the virtual to a wide variety of problems synchrony model
 The high performance approach is now gaining through its toolkit wide acceptance
 5
1 Styles of groups Styles of groups of a distributed system is limited by the information
 This was a consideration simplicity in developing available to the protocols employed for efficient communication
 The Isis process group interface of accurate where trade off information about had to be made between group membership introduces of the interface and the availability
 As a consequence interact for use in multicast address expansion
 The Isis application interface in four styles of process groups that differ in how processes writing
 Our group is working with the software with the group illustrated of a new version that the time of technology foundation which on integration into Mach the OSF 1
AD version and with Unix International plans a reliable group mechanism for UI Atlas
 Fig
 8 anonymous groups are not distinguished from explicit groups this level of the system 
 Isis is optimized to detect and handle each of these cases efficiently
 Peer groups These arise where a set of p cooperate closely for example to replicate data
 The membership is often used as an input to the algorithm used in handling requests as for the concurrent earlier
 With any group given the group s name and of a group will multicast to it repeatedly better database search described Client server groups
 In Isis any process can communicate
 However if a non member appropriate permissions performance to optimize
 Diffusion group is obtained by lust registering the group addressing protocol the sender as a client of the group
 A diffusion group is a client server group in which the clients register themselves but in which the members of the group send messages
 Hierarchical groups a hierarchical application to the full client set and the clients are passive sinks
 Component groups the group is a structure built from multiple that use the hierarchical group initially reasons of scale
 are subsequently contact its root group but be redirected to one of the constituent subgroups 
 Group data would normally be partitioned among the subgroups of the hierarchy the most common
 Although tools are provided for multicasting communication pattern involves interaction with the full membership between a client and the members of some subgroup
 There is no requirement executed that the members of a group be identical or even coded in the same language and an individual or on the same architecture
 Moreover multiple groups can be overlapped process can belong to as many as several hundred different groups although scaling is discussed further below this is uncommon
 5
2 The toolkit interface As noted earlier pipelining the performance of a distributed system of asynchronous less efficient is often limited by the degree of communication problems can be tricky and for this reason the toolkit paradigms these tool by achieved
 The development solutions to distributed than risk errors
 Many Isis users would rather employ includes asynchronous implementations solutions of the more important distributed programming include a synchronization for managing tool that supports a form of locking based on distributed tokens a replication primary backup server design that load balances replicated data a tool for fault tolerant making different group members act as the primary for different programming requests and so forth
 A partial list appears in ISIS manual even non experts distributed software in Table I
 Using these tools and following have been successful in developing examples fault tolerant highly asynchronous process
 Groups create delete join transferring CBCAST ABCAST collecting state 
 0 1 QUORUM or ALL replies
 0 replies gives an group multicast asynchronous multicast
 Synchronization Locking with symbolic strings to represent locks
 Deadlock detection or avoidance must be addressed at the application level
 Token passing
 Replicated processes data Implemented by broadcasting updates to group having copies
 Dynamic spooling system reconfiguration Transfer values to using replicated that join using state transfer facility data in an update facility logging configuration
 Monitoring for state recovery after failure
 Monitor watch a process a site trigger actions site failures and etc after failures and recoveries
 Changes to process group membership Distributed multiple automated execution facilities
 Redundant computation primary
backup all take the same action subdivided among servers
 Coordinator cohort recovery when site recovers program automatically restarted
 If first to recover state loaded from logs or initialized by
 State join active process group and transfer WAN communication Reliable long haul message passing and file transfer facility
 The example the procedures messages is in standard C
 The server initializes main loop in Isis and declares incoming that will handle update and inquiry requests dispatches to these procedures generation as needed other styles of main loop are also supported 
 Scanning is specific to the C interface
 The formatted I
O is not style of message available where type information at runtime
 the current contents of the database to a server that an existing server
 The state transfer routines are concerned with sending has just been started and is joining the group
 In this situation do a state transfer invoking will cause to an invocation the message its state sending of its state
 Isis arbitrarily selects each call that this procedure makes side in our example on the receiving the latter simply passes and update to the update procedure the same message format is used by send state it is possible
 Of course there are many variants on this basic scheme for example only certain servers to join and so forth
 The client program does a pg lookup to find the server
 should be allowed to handle to indicate to the system that processes state transfer requests to refuse to allow certain calls to its query and update
 Subsequently procedures are mapped into messages to timeserver
 Here are some programming examples on how isis handles incoming SQL queries
 For the group ABCAST in this case the database server of Figure 9 uses a redundant style of execution request and will receive multiple identical replies from all copies in which the client broadcasts
 In practice each client will wait for the reaction to failure but reply and ignore all others
 Such an approach provides the fastest possible solution
 The disadvantage of consuming n times the sources of a fault intolerant process group
 An alternative would have been to subdivide the search so that each server performs the work
 Here the client would combine fails instead of replying a condition Isis interfaces have been developed exist for UNIX workstations responses from all the servers in Isis
 Repeating the request if a server readily detected
 For C C Fortran Common Lisp Ada and Smalltalk from all major vendors and ports of Isis and mainframes as well as for Mach Chorus ISC and is represented in the SCO UNIX the DEC VMS system binary format used by the sending if necessary automatically and Honeywell s machine Lynx OS
 Data within messages and converted to the format of the destination upon reception transparently
 6
 Who uses Isis and how
 This section briefly reviews several Isis applications looking at the roles that Isis plays
 6
1 Brokerage a number of introduction Underlying Isis users are concerned Figure 11 illustrates employed with financial computing systems such as the one cited in the perspective in which groups one
 Such a system now seen from an internal by the broker become streams of data evident the services
 The architecture is a client server in which the servers filter and analyze and reorganize themselves so that service is not interrupted
 Fault tolerance here refers to two very different specific aspects of the application
 First financial systems must rapidly restart after failed components or hardware failures
 Second software system functions rebooting that require fault tolerance at the level of files or database such as a guarantee that after Isis was designed a file or database manager will be able to recover local data files at low cost
 To address the first sort of problem but includes several tools for solving the latter one
 Generally information periods the approach taken is to represent key services using process groups replicating service state so that even if one server process fails the other can respond to requests on its behalf
 When n service programs are operational one can often exploit the redundancy to improve response must pay for fault tolerance begins to outweigh failures
 The benefit is time
 Thus rather than asking how much such an application pilate questions concurrency something concern the level of replication acceptable at which the overhead assuming and the minimum performance approach
 k component Fault tolerance of a side effect of the replication computing
 A significant communication theme in financial primitives is the use of a subscription
publication style
 The basic Isis numbing over the do not spool messages for future replay hence an application ti s functionality
 a dynamically predicting varying collection system the NEWS facility has been developed
 A final aspect of brokerage systems to support that service
 A firm may work with dozens or hundreds of financial models instruments needed to be waded under varying market
 Market behavior for the financial will be only a small subset consists of a processor of these services at any time
 Thus systems conditions of this sort generally pool on which services execution and load a remote can be started as necessary balancing mechanism
 And this creates a need to support an automatic of typical network complicates
 The heterogeneity by introducing or require special pattern matching processors i
e
 certain programs may be subject to licensing for some specific hardware configuration described or may simply have been compiled
 This problem is solved using the Isis network resource manager an application later in this section
 6
2 Database replication and database triggers Although the Isls computation model differs from a transactional model see also Sec
 7 Isis is useful in constructing distributed database applications
 In fact many as half of the applications as with which we are familiar are concerned with this problem
 focus on replicating a database for fault tolerance the database system or to support need not be
 Typical uses of Isis in database applications concurrent searches for improved performance
 In such an architecture that aware Isis is present
 Database clients access the database through a layer of software that multicasts updates
 Servers are supervised to the set of servers by a process while issuing queries directly to the least loaded server
 Clients of load changes in the server updates
 Isis supervises the restart of a failed server from a checkpoint and log of subsequent addresses
 It is interesting to realize that even such an unsophisticated need among database users would require extending standards
 Beyond database replication approach to database replication support addresses a widely perceived such as this long run
 Of course comprehensive execution for applications Isis to support a transactional model and to implement the XA
XOpen Isis users have developed
 By monitoring WAN databases by placing a local database system traffic on a LAN updates of importance to each LAN in a WAN system
 Remote users can be intercepted monitors for incoming control the update and distributed through the IsIs WAN architecture
 To avoid costly updates and applies developers send them to the database server as necessary
 Concurrency problem of applications such as these normally partition the database so that the data associated with each LAN is directly updated only from within that LAN
 On remote LAN s for many applications
 A trigger is a query that if such data can only be queried and could be stale but this is still sufficient
 A final use of Isis in database is incrementally specified evaluated becomes settings is to implement database triggers against the database as updates true
 For example position exceeds condition occur causing some action immediately to be sounded
 A broker might request that an alarm some threshold
 As data enters the financial database by the brokerage such a query would be evaluated repeatedly
 The role of Isis is in providing programs tools for reliably notifying capable applications when such a trigger becomes enabled and for developing of taking the desired actions despite failures
 6
3 Major Isis based utilities In the above subsection we alluded to some of the fault tolerant utilities that have been built over Isis
 There are currently five such systems
 NeWS This application supports a collection of communication topics to which users can subscribe with file system address style a replay of recent postings or post messages
 Topics are identified using and it is possible to post to topics on a remote network a mail notation
 Thus a Swiss brokerage application of messages joins firm might post some quotes to 
GENEVA
QUOT 
IBM NEW YORK 
 It creates a process group for each topic monitoring posted to it for replay to new subscribers each such group to maintain a history using a state transfer when a new member NMGR this program manages
 This involves monitoring batch style jobs and performs load sharing in a distributed into a processor pool setting
 And the candidate machines which are collected scheduling on the pool job machines are suitable one
 This criteria can readily be opposed failed to run batch style Parallel
 A pattern matching mechanism is used for job placement for a given job a criteria based on load and available memory be changed 
 When employed to manage each service critical is used to select services as system jobs the program monitors make is an example application and automatically program restarts that uses components of a distributed application NMGR for job placement
 This system compiles by fanning out compilation subtasks to compatible SBM89 provides fault tolerant NFS compatible file storage
 Replicates files are replied for both to increase performance tolerance the level of replication meantime is varied depending on the style of access detected any files managed are automatically by the system after a failed node recovers file replication brought up to date
 The file system reactive control interface applicator or approach conceals MErA
LOMrrA lions MCWB91 environment monitored from the user who sees a compatible system for building fault tolerant META is an extensive Woo91 
 It consists of a layer for instrumenting a sensor a distributed application by defining sensors by the system sensors and actuators
 An actuator is any entity capable of taking an action the status of software
 User defined is any typed value that can be polled on request
 Built in sensors include the load on a machine and the set of users on each machine
 The raw sensors layer and hardware components of the system and actuators extend this initial set
 sensors by an intermediate facility
 This layer sensors such actuators of the lowest layer are mapped to abstract a simple database style interface which also supports an entity relation fluency and a triggering supports as polling data model and fault tolerance
 and conceals Sensors
 many of the details of the physical can be aggregated for example by taking the average load on the servers that manage a replicated language which will initiate a pre specified database
 The interface supports a simple trigger is detected
 Terms called action when a specified for specifying control condition
 Running over Mm A is a distributed language LoMrrA
 LoMrrA code is embedded actions in a high level interpreter triggered into the UNIX CSH command
 At runtime LoMrrA by events that can control statements is expanded into distributed finite state machines local to a sensor or system components
 A process group is used to implement when a monitored condition aggregates perform these state transition and to notify applications and for saving messages
 This subsystem arises MB90 and is responsible for wide area communication
 It conceals to groups that are only active periodically
 Communication interface link failures present an exactly once
 6
4 Other Isis applications Although this section covered a variety of Isis applications over the system
 In addition a systematic review of the full range of soRwate that has been developed to the problems cited above
 Isis has been applied to systems reliable to telecommunications replacement switching for the AEGIS and intelligent aircraft tracking networking and combat applications engagement military systems system medical control weather such as a proposed graphics and virtual reality applications management and resource scheduling seismology for shared factory automation facilities and production and a wide area popular computing prediction computing and storm tracking system at laboratories 1oh93 Thog0
 ASC92 
 Isis has also proved for scientific as a beam such as CERN and Los Alamos accelerator and has been applied to such problems that combine a highly parallel focusing system for a particle with a vectorized management
 It should architecture atmospheric a weather simulation ocean model and resource model and displays output on advanced graphics workstations facilities
 On LAN issues software for shared supercomputing that although also be noted the paper has focused compose
 Isls also supports a WAN cited and has been used in WANs as LAN solutions of up to ten LANs
 Many of the applications by a reliable but less responsive WAN layer
 above are structured interconnected
 7 Isis and other distributed computing technologies Our discussion has overlooked next generation issues that arise in the Advanced Automation System CASD85 which also uses a process group model compares the sorts of real time air traffic similarly one might wonder how the Isis execution models
 Unfortunately these are complex technology issues like the one used in AAS differs from Isis in providing strong real time control based computing system being developed with transactional model by IBM for the FAA CD90 
 It would be difficult to do justice database execution to them without a lengthy proof
 Briefly a process that experiences a timing fault in the AAS model could receive messages because the criteria for accepting violations or rejecting if faulty of such will reject or reject messages guarantees provided that timing assumptions
 This can lead to consistency resynchronized it from initiating others accept uses the value of the local clock
 e
g
 could the clock is subsequently spread nothing that other processes a message is transient a process accept deadline prevents with other clocks Moreover the inconsistency which other processes will be maintained
 Isis on the other hand guarantees that consistency will be achieved
 The relationship and transactional offered between Isis and transactional are order based focus on isolation of concurrent transactions but not that real time delivery
 However where the tools persistent between data and rollback abort mechanisms members of groups failure handling by a database system from one another in the fact that both virtual synchrony BHG87 
 Systems execution originates models those offered in Isis are concerned with direct cooperation reconfigure and ensuring that a system can dynamically itself to make serializability
 The WAN architecture of isis ii similar to the WAN structure bet because WAN partition are more common encourages a more synchronous programming style
 WAN communication and link state is logged to disk files unlike WAN communication WAN issues are which enables Isis to retransmit messages lost when WAN partition to suppress duplicate messages
 to discuss in more detail in MB90 
 Persistency of data is a big issue in database systems but a commit of a multicast forward progress when partial failures occur is a form of reliable multicast while delivery much less so in Isis
 For example serializability and permanence of the transaction being committed in isis provides much weaker guarantees
 8 Conclusions We have argued that the next generation of distributed computing systems semantics exceed will benefit from support for process groups and group programming
 Arriving the abilities or the reliability would be a difficult problem application performance development and implementing those semantics for a process group mechanism of many distributed systems
 Either the operating system must implement applications of group structured is unlikely to be acceptable with process groups
 The Isis system provides tools for programming leads us to the following conclusions
 Process synchronized groups should embody strong semantics
 A simple and powerful communication distributed for group membership and synchronous execution is a synchronized model can be based on closely but high performance heavily pipelined
 The virtual synchrony approach in which communication using a closely style of execution combines these benefits synchronous execution safely be relaxed
 Efficient protocols Non experts model but deriving a substantial performance benefit when message ordering can have been developed for supporting virtual synchrony
 This paper is being written as the first phase of the Isis effort approaches system has demonstrated achieves levels the feasibility of a new style of distributed to those afforded a resulting system relatively easy to use
 We feel that the initial in BSS91 Isis computing suitable for integration incorporate on the same platforms
 As reported of performance comparable by standard technologies RPC and streams Looking to the future we are now developing operating RBG92 systems an Isis microkernel into next generation a security architecture such as Mach and Chorus
 This new system will be a real time communication that operate on distributed to implement high reliability suite
 The programming model will be unchanged
 Group programming could ignite a wave of advances platforms in reliable distributed computing and of applications developers
 Using current technologies it is impractical to employ software self managing or to develop software for typical replicated after distributed systems that reconfigures data or simple coarse grained parallelism automatically failure or recovery
 Consequently although current resources deficient distributed the programmers are severely constrained software who develop software infrastructure
 By removing these unnecessary environments obstacles embody tremendously powerful networks computing a vast groundswell of reliable application development can be unleashed
 