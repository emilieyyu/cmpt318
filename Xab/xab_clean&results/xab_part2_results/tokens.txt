model-based
evaluation
of
expert
cell
phone
menu
interaction
robert
st
amant
and
thomas
e
horton
north
carolina
state
university
and
frank
e
ritter
the
pennsylvania
state
university
we
describe
concepts
to
support
the
analysis
of
cell
phone
menu
hierarchies
based
on
cognitive
models
of
users
and
easy-to-use
optimization
techniques
we
present
an
empirical
study
of
user
performance
on
five
simple
tasks
of
menu
traversal
on
an
example
cell
phone
two
of
the
models
applied
to
these
tasks
based
on
goms
and
act-r
give
good
predictions
of
behavior
we
use
the
empirically
supported
models
to
create
an
effective
evaluation
and
improvement
process
for
menu
hierarchies
our
work
makes
three
main
contributions
a
novel
and
timely
study
of
a
new
very
common
hci
task
new
versions
of
existing
models
for
accurately
predicting
performance
and
a
search
procedure
to
generate
menu
hierarchies
that
reduce
traversal
time
in
simulation
studies
by
about
a
third
1
introduction
there
are
2
billion
cellular
telephones
in
use
today
and
this
number
is
expected
to
reach
3
billion
in
2008
diprima
2006
cell
phones
are
used
for
more
than
making
calls
they
now
include
tools
for
managing
contact
information
voice
mail
and
hardware
settings
and
often
software
for
playing
games
browsing
the
web
and
connecting
to
specialized
information
services
the
market
penetration
of
cell
phones
is
much
higher
than
that
of
conventional
computers
which
raises
significant
opportunities
and
challenges
for
hci
this
article
presents
techniques
for
evaluating
and
improving
cell
phone
usability
in
particular
the
usability
of
the
hierarchical
menus
that
provide
access
to
most
functionality
aside
from
dialing
and
data
entry
while
cell
phone
menu
interfaces
may
appear
simple
at
first
glance
they
pose
a
nontrivial
design
problem
consider
the
menu
hierarchy
for
the
kyocera
2325
cell
phone
the
first
25
items
of
which
are
shown
in
table
i
if
we
count
as
terminals
those
selections
that
open
an
application
e
g
a
game
a
list
of
data
e
g
recent
calls
or
a
set
of
choices
in
the
cell
phone
equivalent
of
a
dialog
box
e
g
for
setting
the
ringer
volume
then
this
hierarchy
contains
98
terminals
reachable
through
22
intermediate
selections
the
longest
menu
contains
12
items
all
associated
with
the
selection
of
different
sounds
the
shortest
menu
contains
a
single
item
for
entering
a
voice
memo
terminals
in
the
hierarchy
are
up
to
four
levels
deep
and
the
mean
number
of
actions
to
reach
an
item
scrolling
plus
selection
over
all
98
terminals
is
13
3
taking
on
the
order
of
7
seconds
for
an
experienced
user
this
menu
hierarchy
is
as
large
as
that
of
a
moderately
sized
desktop
application
e
g
eudora
5
2
with
103
items
this
is
not
unusual
for
cell
phones
the
menu
hierarchy
for
the
samsung
mm-a800
which
includes
a
digital
camera
contains
a
remarkable
583
items
pogue
2005
designing
menu
systems
for
any
platform
including
desktop
systems
can
be
challenging
but
for
cell
phones
the
problem
is
made
more
difficult
by
several
factors
--
discrete
selection
actions
in
the
form
of
button
presses1
are
usually
needed
to
move
between
menu
items
because
most
cell
phones
lack
more
direct
selection
capabilities
e
g
a
mouse
or
touch
screen
--
cell
phone
displays
are
small
allowing
only
a
few
menu
items
to
be
displayed
at
a
single
time
many
cell
phones
lack
functionality
for
paging
up
or
down
making
display
limitations
even
more
significant
--
there
is
less
standardization
in
hardware
supporting
menu
traversal
for
cell
phones
than
for
desktop
machines
some
phones
have
two-way
directional
buttons
others
four-way
some
have
a
labeled
menu
button
while
others
rely
on
a
button
with
overloaded
functionality
button
placement
can
vary
significantly
with
cancel
and
ok
buttons
reversed
from
one
phone
to
another
if
interfaces
are
developed
for
the
lowest
common
denominator
independently
of
specific
hardware
which
is
common
practice
at
the
mobile
application
level
then
even
cell
phones
with
elaborate
interaction
support
become
less
efficient
1
we
use
the
terms
button
presses
and
key
presses
interchangeably
these
factors
suggest
that
cell
phone
menu
interfaces
deserve
close
analysis
and
that
they
need
specialized
techniques
for
their
development
and
evaluation
which
this
article
takes
up
in
two
parts
in
section
2
we
describe
an
empirical
study
of
the
traversal
of
cell
phone
menus
along
with
three
models
for
predicting
user
performance
a
fitts
law
model
fitts
1954
a
goms
model
john
and
kieras
1996a
1996b
kieras
1999
and
an
act-r
model
anderson
et
al
2004
all
the
models
give
good
accounts
of
qualitative
patterns
in
user
behavior
and
the
latter
two
models
give
good
to
very
good
quantitative
predictions
of
behavior
at
both
aggregate
and
detailed
levels
of
analysis
in
section
3
we
use
our
empirical
results
to
define
a
novel
evaluation
metric
for
the
efficiency
of
cell
phone
menu
traversal
we
define
a
search
procedure
that
generates
improvements
to
a
menu
hierarchy
with
respect
to
a
given
set
of
characteristic
user
profiles
this
article
makes
several
contributions
to
the
hci
literature
a
novel
and
timely
study
of
a
very
common
new
hci
task
menu
use
on
cell
phones
new
models
for
accurately
predicting
performance
on
this
task
and
a
simple
theoretically
motivated
search
procedure
that
generates
menu
hierarchies
that
reduce
traversal
time
in
simulation
studies
by
a
third
which
should
be
generally
applicable
to
all
menu-based
systems
2
a
performance
study
our
interest
is
in
expert
i
e
practiced
and
error-free
use
of
cell
phone
menu
systems
for
control
purposes
it
was
not
feasible
to
collect
data
from
experienced
users
on
their
own
cell
phones
with
all
the
potential
differences
in
hardware
and
software
as
a
compromise
we
had
users
practice
a
small
number
of
tasks
so
that
all
tasks
could
be
remembered
easily
and
then
carry
them
out
on
a
single
cell
phone
though
restrictive
these
conditions
give
a
reasonable
starting
point
for
an
empirical
study
and
model
validation
we
used
a
kyocera
2325
as
shown
in
figure
1
at
the
top
level
of
its
internal
menu
the
kyocera
display
shows
a
single
selectable
icon
the
ok
button
selects
the
current
item
on
the
four-way
scrolling
button
right
and
left
move
through
the
item
list
horizontally
for
lower-level
menus
three
items
are
displayed
at
a
time
oriented
vertically
each
new
menu
list
is
displayed
with
the
top
item
highlighted
the
ok
button
on
the
left
is
used
to
select
the
currently
highlighted
item
in
these
menus
while
the
clr
button
on
the
right
returns
to
the
previous
level
in
the
hierarchy
the
up
and
down
regions
of
the
four-way
button
move
through
the
menu
downward
scrolling
is
incremental
with
items
appearing
one
at
a
time
at
the
bottom
of
the
screen
2
1
procedures
we
recruited
fourteen
experienced
cell
phone
users
for
our
study
students
who
took
part
for
course
credit
the
first
two
users
acted
as
participants
in
a
pilot
phase
of
the
experiment
in
which
software
for
data
collection
and
analysis
was
tested
and
procedures
were
refined
their
data
were
also
used
in
developing
but
not
validating
the
models
described
in
later
sections
the
remaining
twelve
users
male
undergraduates
in
computer
science
provided
the
main
body
of
data
for
the
study
all
were
right
handed
all
but
one
used
their
right
hand
to
hold
the
cell
phone
and
all
used
the
thumb
of
the
right
hand
to
press
keys
to
collect
data
we
recorded
the
tone
produced
by
each
key
press
as
transmitted
through
the
earphone
jack
of
the
cell
phone
collection
was
initiated
by
the
first
key
pressed
by
the
participant
and
ended
with
the
last
key
pressed
the
onset
of
each
key
press
is
detectable
by
a
threshold
test
on
the
audio
output
waveform
from
the
earphone
jack
using
software
we
wrote
for
this
purpose
each
tone
lasts
approximately
0
095
s
during
which
time
the
display
changes
before
the
key
is
released
system
responses
are
much
faster
than
key
presses
and
are
treated
as
occurring
within
elementary
key
press
actions
and
not
contributing
to
the
duration
of
user
actions
participants
started
with
a
practice
stage
in
which
they
familiarized
themselves
with
the
cell
phone
and
its
menu
system
we
gave
each
participant
a
paper
form
describing
how
five
terminal
menu
items
were
to
be
reached
as
shown
in
the
first
column
of
table
ii
each
represents
a
scrolling
action
with
commas
separating
consecutive
selection
actions
reaching
each
of
the
terminal
items
those
at
the
end
of
each
sequence
constituted
a
task
in
the
study
participants
practiced
each
task
until
they
could
carry
it
out
three
times
in
a
row
without
error
each
trial
in
the
study
required
reaching
one
of
the
five
target
terminal
items
without
access
to
the
paper
form
tasks
were
presented
to
participants
in
a
randomized
order
we
obtained
five
correct
trials
per
participant
i
e
without
errors
or
extraneous
actions
discarding
fewer
than
10
trials
across
all
participants
less
than
3
of
the
data
this
means
that
our
cleaned
dataset
contains
only
ok
and
right/down
key
press
actions
2
280
observations
in
total
2
280
12
users
5
repetitions
10
9
3
8
8
actions
per
task
table
ii
shows
the
mean
duration
per
task
over
all
participants
in
the
study
user
performance
is
much
slower
than
for
single-level
menu
selection
with
a
mouse
on
a
standard
desktop
platform
byrne
2001
which
highlights
the
importance
of
specialized
models
for
this
task
as
we
discuss
below
2
2
models
of
user
behavior
we
predicted
user
performance
with
three
models
each
supported
by
a
considerable
background
literature
a
fitts
law
model
a
goms
model
and
an
act-r
model
were
developed
independently
of
each
other
based
on
data
from
one
task
carried
out
by
one
of
the
users
in
the
pilot
stage
of
the
experiment
2
the
three
models
run
in
the
same
software
framework
that
evolved
over
the
course
of
this
research
the
framework
provides
a
common
specification
of
the
kyocera
cell
phone
including
the
sizes
and
positions
of
keys
and
the
distances
between
them
as
measured
on
the
physical
device
the
framework
also
supports
a
common
representation
of
the
menu
hierarchy
shown
in
table
i
the
models
use
the
same
software
environment
that
includes
a
simulation
of
the
cell
phone
s
interface
and
produces
output
in
a
consistent
form
2
2
1
a
fitts
law
model
our
model
is
based
on
mackenzie
s
2003
version
of
fitts
law
for
one-finger
typing
for
text
entry
on
mobile
phones
movement
time
in
seconds
for
thumb
input
is
where
d
represents
the
distance
amplitude
of
the
movement
and
w
the
width
of
the
target
the
value
for
d
in
our
study
was
14
5
mm
which
separates
the
ok
button
and
the
down
button
area
with
widths
w
of
6
mm
and
10
mm
as
provided
by
the
cell
phone
specification
this
model
as
with
the
other
models
described
below
makes
the
simplifying
assumption
that
all
scrolling
actions
can
be
represented
by
down
key
presses
even
though
the
first
action
is
a
right
key
press
with
a
slightly
different
size
and
distance
from
the
ok
button
to
execute
the
fitts
law
model
for
each
of
the
five
tasks
a
path
is
generated
from
the
root
of
the
menu
hierarchy
to
the
terminal
item
for
the
task
each
step
on
the
path
is
associated
with
a
movement
action
or
a
key
press
action
durations
for
all
the
steps
are
accumulated
to
produce
an
overall
task
duration
2
2
2
a
goms
model
the
second
model
is
a
goms
model
kieras
1999
john
2003
goms
methods
for
task
analysis
produce
hierarchical
descriptions
of
methods
and
operators
needed
to
accomplish
goals
some
goms
models
have
been
strikingly
successful
in
critical
hci
domains
gray
et
al
1993
in
our
model
a
method
is
defined
for
each
task
in
the
study
all
of
the
methods
are
automatically
generated
from
the
menu
hierarchy
specification
based
on
the
same
path
traversals
used
for
the
fitts
law
model
within
a
method
each
step
corresponds
to
the
selection
of
a
menu
item
the
goms
method
for
selecting
the
terminal
item
ringer
volume
is
shown
at
the
top
of
figure
2
each
of
the
steps
in
this
method
in
turn
decomposes
into
a
selection
method
such
as
select
menu
or
select
sound
which
involves
scrolling
until
a
specific
item
in
the
sequence
is
reached--selection
in
a
menu
at
a
single
level
there
is
one
selection
method
for
each
menu
item
from
select
settings
to
select
ringer
volume
all
of
the
selection
methods
have
the
same
form
as
shown
in
the
example
at
the
bottom
of
figure
2
specifications
of
these
lower-level
methods
are
created
automatically
from
a
generic
template
2
preliminary
versions
of
the
goms
and
act-r
models
described
in
an
earlier
conference
paper
st
amant
et
al
2004b
contained
minor
inconsistencies
these
inconsistencies
were
removed
in
revision
performance
was
altered
by
no
more
than
a
few
percentage
points
the
qualitative
behavior
of
the
models
and
comparisons
between
them
remain
unchanged
from
their
earlier
description
processing
in
a
selection
method
involves
iterating
through
a
sequence
of
four
exhaustive
tests
of
whether
or
not
the
target
intermediate
or
terminal
item
is
currently
highlighted
and
whether
the
finger
is
on
the
appropriate
key
for
selection
or
scrolling
the
durations
of
the
steps
follow
the
guidelines
established
by
kieras
1999
in
his
work
on
gomsl
and
glean3
including
a
version
of
fitts
law
each
test
in
a
decision
step
requires
0
050
s
plus
the
time
to
execute
any
actions
in
the
body
of
the
decision
if
the
test
succeeds
steps
that
involve
key
presses
last
0
280
seconds
plus
the
duration
of
tests
or
auxiliary
operations
0
330
seconds
in
total
moving
to
the
down
key
lasts
0
083
seconds
0
133
seconds
in
total
moving
to
the
ok
key
lasts
0
113
seconds
0
163
seconds
in
total
movement
times
are
based
on
the
movement
component
of
the
fitts
law
model
in
the
previous
section
the
model
assumes
negligible
system
response
time
and
that
there
are
no
verification
steps
further
the
initial
visual
action
to
acquire
the
first
menu
item
occurs
before
the
first
key
press
timing
begins
at
the
first
key
press
and
as
the
highlighted
menu
item
changes
no
visual
re-acquisition
is
needed
during
selection
or
scrolling
activity
processing
is
entirely
sequential
with
no
overlapping
of
steps
modeling
results
based
on
the
description
above
are
generated
by
a
goms
interpreter
that
we
implemented
specifically
for
this
project
while
there
would
have
been
some
benefit
to
using
existing
goms
modeling
tools
and
environments
e
g
glean3
kieras
1999
we
judged
that
the
value
of
a
single
simulation
and
modeling
framework
despite
its
limitations
for
the
fitts
law
goms
and
act-r
models
and
the
phone
simulation
would
provide
a
worthwhile
degree
of
consistency
across
our
evaluation
2
2
3
an
act-r
model
the
third
model
is
based
on
the
act-r
5
0
cognitive
architecture
anderson
et
al
2004
we
picked
act-r
as
a
representative
cognitive
modeling
architecture
and
as
a
common
choice
in
hci
work
act-r
integrates
theories
of
cognition
visual
attention
and
motor
movement
and
has
been
the
basis
for
a
number
of
models
in
hci
e
g
ritter
and
young
2001
act-r
models
simulate
the
time
course
and
information
processing
of
cognitive
mechanisms
such
as
changes
of
attention
and
memory
retrievals
as
well
as
external
actions
such
as
movement
of
the
fingers
roughly
speaking
act-r
models
provide
details
that
can
explain
behavior
in
cognitive
terms
at
a
level
not
addressed
by
the
coarser
goms
representation
in
our
act-r
model
a
virtual
simulated
display
maintains
a
representation
of
the
current
items
in
the
cell
phone
s
menu
interface
hierarchy
menu
items
are
presented
in
a
vertical
list
and
one
of
the
menu
items
is
always
highlighted
all
items
are
presented
for
each
list
independent
of
the
physical
display
size
when
an
item
is
selected
in
the
virtual
display
the
list
is
refreshed
with
the
appropriate
submenu
the
model
s
memory
is
initialized
with
a
set
of
declarative
memory
chunks
that
represent
the
parent-child
relationships
between
the
intermediate
menu
items
needed
to
reach
terminal
items
for
example
for
the
ringer
volume
task
pairs
of
declarative
memory
chunks
for
the
menu/settings
settings/sounds
and
sounds/ringer
volume
relationships
are
included
chunks
representing
the
parent
child
relationships
are
generated
automatically
via
traversal
of
the
menu
hierarchy
specification
act-r
s
model
of
the
hand
is
initialized
with
the
thumb
on
the
ok
button
procedural
knowledge
in
the
act-r
model
consists
of
eleven
productions
--
find-top-item
searches
the
visual
field
for
a
highlighted
menu
item
immediately
after
a
selection
action
--
find-next-item
searches
for
the
next
item
below
the
one
currently
attended
immediately
after
a
scrolling
item
--
attend-item
causes
the
location
of
the
highlighted
item
to
be
visually
attended
--
encode-item
encodes
the
text
for
the
attended
menu
item
so
that
its
content
i
e
the
name
of
the
item
in
text
form
becomes
accessible
to
the
model
--
respond-select-target
fires
when
the
currently
highlighted
item
is
recognized
as
the
terminal
item
--
recall-item-association
retrieves
an
association
if
it
exists
between
the
currently
highlighted
menu
item
and
its
subordinate
item
along
the
path
to
the
terminal
item
--
respond-select-ancestor
recognizes
an
intermediate
menu
item
along
the
path
to
the
terminal
item
i
e
one
of
its
ancestors
--
respond-continue-down
fires
when
the
highlighted
item
is
neither
the
next
item
to
be
selected
nor
along
the
path
to
the
terminal
item
--
move-down
causes
the
motor
module
to
press
the
down
key
--
select-target
causes
the
motor
module
to
press
the
ok
key
on
the
terminal
menu
item
ending
model
execution
--
select-ancestor
causes
the
motor
module
to
press
the
ok
key
on
an
intermediate
menu
item
the
model
starts
with
the
goal
of
selecting
a
specific
terminal
menu
item
the
simulation
environment
shows
a
single
highlighted
item
the
model
first
retrieves
a
target
intermediate
item
to
be
selected
it
then
searches
for
the
currently
highlighted
menu
item
in
its
field
of
view
once
found
the
visible
item
is
attended
and
then
encoded
so
that
its
text
representation
becomes
accessible
if
the
text
matches
the
target
item
and
this
is
the
same
as
the
terminal
item
then
the
model
initiates
motor
actions
to
move
the
thumb
to
the
ok
button
if
necessary
and
press
it
model
execution
completes
at
this
point
if
the
text
matches
the
target
item
but
it
is
not
the
terminal
item
then
this
means
that
the
currently
highlighted
item
is
on
the
path
to
the
terminal
the
ok
button
is
pressed
and
another
target
item
is
retrieved
from
memory
visual
processing
repeats
as
before
if
the
text
of
the
highlighted
item
does
not
match
the
target
item
then
motor
actions
are
initiated
to
move
the
thumb
to
the
down
button
and
press
it
control
is
transferred
to
the
visual
search
action
as
before
in
the
model
manual
scrolling
actions
can
trail
behind
visual
processing
by
an
unspecified
amount
determined
by
processing
in
the
model
such
as
memory
retrievals
the
visual
and
manual
modules
become
synchronized
when
a
new
menu
is
presented
user
errors
such
as
pressing
an
incorrect
key
are
not
modeled
model
execution
is
deterministic
with
no
noise
parameters
used
our
model
is
defined
in
the
act-r
modeling
language
but
its
execution
depends
on
an
extension
to
perceptual-motor
processing
in
the
architecture
the
perceptual
and
motor
components
of
act-r
5
0
have
some
bias
toward
desktop
activities
such
as
selecting
menu
items
with
the
mouse
and
navigating
through
windows
and
dialog
boxes
anderson
et
al
2004
byrne
2001
in
act-r
the
keyboard
is
represented
as
an
array
of
locations
neighboring
keys
are
a
unit
distance
apart
in
a
rectilinear
arrangement
and
each
key
has
unit
width
and
height
standard
key
presses
are
modeled
as
finger
movements
from
locations
on
the
home
row
to
the
location
of
a
target
key
to
handle
interaction
with
a
cell
phone
keypad
more
flexibility
is
needed
in
models
of
finger
movements
and
the
keyboard
we
extended
the
act-r
environment
representation
to
support
a
layout-based
keypad
in
which
the
size
and
placement
of
keys
can
be
specified
individually
the
new
representation
allows
us
to
build
specifications
of
different
cell
phone
keypads
that
can
be
integrated
with
act-r
motor
processing
in
a
straightforward
way
fingers
are
modeled
as
moving
between
locations
which
in
the
case
of
this
experiment
are
key
locations
but
may
be
arbitrary
if
needed
2
3
model
performance
we
can
describe
the
performance
of
the
models
at
two
levels
the
accuracy
with
which
the
models
predict
the
overall
duration
of
tasks
and
the
accuracy
of
their
predictions
of
the
duration
of
individual
actions
these
two
levels
are
discussed
in
the
sections
below
other
factors
commonly
explored
by
modeling
such
as
learning
behavior
and
the
occurrence
of
errors
are
excluded
by
the
design
of
the
experiment
2
3
1
task-level
performance
table
iii
shows
summary
model
performance
and
user
data
broken
down
by
task
figures
3
through
7
show
more
detailed
views
of
the
same
data
in
graphical
form
both
the
goms
and
act-r
models
give
good
approximations
of
user
performance
goms
predictions
are
within
the
99
confidence
interval
for
mean
overall
task
duration
for
all
target
items
except
view
day
act-r
predictions
are
within
this
interval
for
two
of
the
target
items
the
fitts
law
model
does
less
well
for
reasons
that
are
worth
discussing
many
models
of
cell
phone
interaction
such
as
keypad
dialing
and
one-finger
text
entry
mackenzie
2003
have
been
based
on
fitts
law
which
motivated
this
aspect
of
our
evaluation
our
fitts
law
model
performs
relatively
poorly
despite
the
success
of
such
models
elsewhere
the
fitts
law
model
produces
times
that
are
about
half
of
the
observed
times
this
is
not
surprising--much
of
the
activity
of
this
menu
selection
task
is
outside
the
scope
of
the
model
silfverberg
et
al
2000
describe
a
comparable
example
of
where
fitts
law
models
break
down
in
a
discussion
of
text
entry
on
mobile
phones
for
some
cell
phones
text
entry
is
aided
by
lexicon-based
word
disambiguation
while
typing
the
user
ordinarily
refers
to
the
display
in
order
to
decide
whether
the
system
has
correctly
disambiguated
the
word
being
typed
in
text
entry
such
cognitive
processing
may
not
be
needed
by
expert
users
familiar
with
the
disambiguation
system
in
this
menu
selection
task
however
we
assume
that
users
confirm
their
actions
in
other
words
significant
visual
and
cognitive
processing
is
necessary
at
each
step
in
the
process
but
this
is
not
captured
by
the
fitts
law
model
though
it
is
represented
in
the
goms
and
act-r
models
the
consistent
linearity
of
user
performance
across
tasks
in
figures
3
through
7
suggests
a
straightforward
way
to
measure
the
predictive
power
of
the
goms
and
act-r
models
through
comparison
with
a
least
squares
linear
model
because
the
models
predictions
apply
to
each
task
a
harsh
way
to
test
them
is
to
compare
them
to
a
linear
regression
model
fit
to
data
from
each
task
table
iv
shows
the
coefficient
of
determination
r
2
for
these
linear
models
for
each
button
press
the
linear
model
predicts
time
t
by
the
number
of
key
presses
k
plus
a
constant
the
remaining
columns
show
analogous
values
for
the
act-r
and
goms
models
a
linear
model
can
also
be
fit
to
the
aggregation
of
performance
data
for
all
tasks
and
all
users
this
aggregate
linear
model
has
an
r
2
of
0
834
although
neither
the
goms
nor
the
act-r
model
accounts
for
as
much
variance
as
a
general
linear
equation
both
are
close
the
comparable
values
are
0
809
for
the
goms
model
and
0
796
for
the
act-r
model
the
aggregate
linear
model
has
appealing
conceptual
and
computational
simplicity
we
use
eq
2
in
section
3
for
just
this
reason
as
a
general
model
of
performance
though
it
has
several
shortcomings
in
comparison
with
the
goms
model
the
act-r
model
and
even
the
fitts
law
model
first
the
latter
are
a
priori
models--they
were
not
tuned
specifically
to
the
data
second
as
we
discuss
later
in
this
section
the
models
give
predictions
at
a
more
detailed
level
than
the
linear
model
can
provide
including
the
ability
to
carry
out
actions
to
produce
this
behavior
third
and
most
important
the
goms
act-r
and
fitts
law
models
have
theoretical
underpinnings
that
give
them
explanatory
power
in
the
case
of
goms
performance
is
explained
by
the
specific
tasks
that
are
represented
the
hierarchical
structure
in
which
they
are
combined
and
dependence
on
a
cognitive
processing
framework
that
provides
specific
timing
predictions
e
g
for
fitts
law
movements
the
act-r
model
extends
the
level
of
detail
in
its
explanations
in
accounting
for
the
interval
between
actions
by
explicit
visual
processing
and
memory
retrievals
and
in
modeling
visual
processing
and
motor
actions
as
proceeding
in
parallel
for
scrolling
actions
but
synchronizing
with
selection
actions
this
allows
performance
on
multiple
tasks
to
be
based
on
models
of
single
tasks
e
g
salvucci
2001
like
all
model-generated
explanations
these
are
provisional
and
subject
to
further
testing
in
particular
the
predictiveness
of
a
linear
model
raises
a
warning
flag
because
task-level
performance
accumulates
the
durations
of
actions
in
sequence
almost
any
reasonable
cumulative
function
is
likely
to
have
the
same
qualitative
shape
the
accuracy
of
the
models
over
tasks
of
different
durations
suggests
that
the
models
have
some
generality
but
this
is
far
from
conclusive
if
as
with
computing
the
purpose
of
modeling
is
insight
rather
than
numbers
hamming
1962
we
should
look
more
closely
at
our
results
2
3
2
action-level
performance
table
v
shows
the
predictions
of
the
mean
time
between
user
key
presses
that
each
model
makes
over
all
the
menu
selection
tasks
there
are
three
different
categories
all
actions
aggregated
over
all
tasks
only
selection
actions
and
only
scrolling
actions
the
actr
and
goms
models
both
provide
good
predictions
at
this
level
with
differences
of
at
most
0
045
s
about
8
error
although
the
fitts
law
model
is
qualitatively
correct
in
predicting
that
selection
actions
take
longer
than
scrolling
actions
it
underpredicts
user
reaction
time
in
all
categories--our
discussion
in
this
section
will
therefore
mainly
focus
on
the
act-r
and
goms
models
the
results
in
table
v
are
limited
in
two
ways
first
they
distinguish
only
between
classes
of
actions
in
the
abstract
independent
of
the
task
context
in
which
they
are
executed
second
the
results
neglect
the
inherent
variance
in
user
performance
even
under
identical
task
conditions
the
actions
of
different
users
or
a
single
user
in
different
trials
may
have
different
durations
we
address
these
two
limitations
in
the
remainder
of
this
section
one
way
to
describe
the
execution
of
a
menu
navigation
task
is
as
a
simple
repeated
pattern
each
task
is
carried
out
through
a
number
of
scrolling
actions
followed
by
a
selection
action
repeated
until
a
terminal
item
is
reached
we
define
a
selection
run
as
a
sequence
of
scrolling
actions
leading
up
to
a
selection
action
as
in
our
per-task
analysis
user
performance
is
basically
linear
for
the
overall
duration
of
selection
runs
and
is
well
predicted
by
both
the
goms
and
act-r
models
with
respect
to
overall
duration
what
is
more
interesting
is
differences
in
duration
for
actions
of
the
same
type
in
selection
runs
the
first
scrolling
action
after
a
selection
action
lasts
much
longer
than
subsequent
scrolling
actions
as
shown
in
figure
8
a
general
linear
model
see
eq
2
would
be
a
straight
line
at
531
ms
per
action
two
factors
appear
to
contribute
to
the
longer
duration
of
the
first
scrolling
action
one
factor
is
movement
time
in
that
for
the
first
scrolling
action
the
thumb
must
move
from
the
ok
key
to
the
down
button
movement
between
keys
is
unnecessary
for
further
scrolling
the
other
factor
is
visual
processing
each
time
that
a
selection
action
takes
place
a
new
set
of
menu
items
appears
on
the
display
and
must
be
read
all
of
the
models
include
a
movement
component
and
thus
reflect
the
general
qualitative
pattern
but
they
vary
in
how
they
handle
visual
processing
the
act-r
model
carries
out
an
explicit
visual
search
which
occurs
in
parallel
with
the
motor
movement
the
goms
model
does
not
include
an
explicit
visual
processing
step
but
each
selection
entails
decision-making
tests
as
well
as
a
call
to
a
new
method
adding
to
the
duration
of
motor
movement
both
models
produce
slight
underpredictions
of
the
duration
of
the
first
scrolling
action
an
alternative
explanation
for
this
pattern
is
offered
by
the
epic
architecture
but
is
based
on
different
low-level
cognitive
assumptions
hornof
and
kieras
1997
a
less
obvious
pattern
is
also
present
in
figure
8
for
users
the
first
scrolling
action
lasts
the
longest
the
second
the
shortest
and
all
succeeding
actions
in
between
we
believe
that
three
factors
explain
the
increase
in
duration
between
the
second
and
remaining
actions
the
first
factor
is
an
environmental
constraint
on
users
visual
processing
because
only
three
menu
items
are
presented
on
the
display
at
a
time
we
can
expect
the
duration
of
the
fourth
and
succeeding
scrolling
actions
to
be
slower
than
the
second
and
third
because
the
items
to
be
traversed
are
not
immediately
available
for
visual
processing
the
second
factor
is
a
possible
strategy
that
users
took
in
dealing
with
menus
that
are
known
via
practice
to
be
long
users
may
quickly
execute
several
scrolling
actions
with
less
attention
to
the
display
until
the
approximate
region
of
the
target
item
is
reached
the
third
factor
is
parallelism
in
visual
processing
and
motor
action
related
experiments
on
menu
selection
with
a
mouse
byrne
2001
suggest
that
eye
movement
is
not
strictly
synchronized
with
motor
activity
in
the
discrete
menu
traversal
actions
of
our
domain
this
means
that
the
eyes
may
scan
ahead
of
the
items
being
highlighted
by
button
presses
the
first
factor
is
not
reproduced
by
our
simulation
environment
and
the
second
is
not
yet
included
in
the
model
the
third
factor
parallelism
in
motor
and
visual
behavior
is
represented
in
the
act-r
model
this
parallelism
accounts
for
the
increase
in
duration
after
the
fourth
scrolling
action
as
the
duration
of
motor
actions
dominates
that
of
visual
processing
the
exact
point
in
the
user
data
at
which
the
increase
occurs
is
not
captured
by
any
of
these
models
neither
is
the
remaining
variability
in
the
duration
of
scrolling
actions
finally
we
note
that
the
cognitive
and
visual
processing
component
of
actions
in
selection
runs
is
much
higher
than
the
movement
component
the
fitt
s
law
model
provides
a
baseline
for
movement-only
duration
but
underpredicts
the
duration
of
user
actions
by
a
factor
of
two
to
three
the
goms
and
act-r
models
for
reasons
discussed
above
come
much
closer
to
user
performance
overall
the
mean
error
for
mean
action
duration
during
all
selection
runs
is
about
14
for
the
goms
model
19
for
the
act-r
model
and
60
for
the
fitts
law
model
our
results
so
far
show
that
the
goms
and
act-r
models
give
accurate
predictions
of
the
mean
duration
of
user
actions
when
actions
are
grouped
into
classes
or
as
in
the
analysis
of
selection
runs
associated
with
a
specific
task
context
these
predictions
however
give
no
information
about
the
accuracy
of
the
models
for
specific
instances
of
actions
in
evaluating
model
predictions
at
the
action
level
the
issue
of
inherent
variability
in
user
performance
is
perhaps
the
most
important
two
common
measures
of
error
that
give
insight
into
this
issue
are
root
mean
squared
error
rmse
and
mean
absolute
error
mae
table
vi
shows
rmse
and
mae
for
the
three
models
for
all
actions
and
for
the
categories
of
scrolling
and
selection
actions
the
prediction
error
for
the
goms
and
act-r
models
per
action
duration
is
much
higher
than
for
mean
duration
about
42
of
the
mean
action
duration
as
given
in
table
v
for
the
rmse
measure
and
32
for
mae
the
values
are
similar
for
the
subcategories
of
scrolling
and
selection
actions
by
these
measures
the
models
are
very
close
in
performance
with
neither
goms
or
act-r
having
an
obvious
advantage
while
these
values
of
rmse
and
mae
are
disappointingly
high
for
the
goms
and
act-r
models
it
is
worth
asking
how
much
they
might
be
improved
as
in
our
task-level
analysis
we
can
define
a
post
hoc
model
based
on
the
user
data
for
comparison
with
the
models
we
have
built
we
begin
by
observing
that
the
predictions
of
the
models
abstract
away
performance
differences
between
individual
users
and
across
trials
for
example
a
model
will
give
the
same
predicted
duration
for
the
sixth
action
in
the
ringer
volume
task
regardless
of
which
of
the
twelve
users
or
which
of
their
five
trials
is
involved
the
variance
in
the
60
data
points
per
unique
action
in
context
gives
rise
to
the
error
measured
in
table
vi
how
well
would
an
optimal
model
perform
for
a
sample
of
data
points
the
best
estimator
with
respect
to
mean
squared
error
is
simply
the
mean
of
the
sample
the
best
post
hoc
model
with
respect
to
least
squares
error
thus
returns
the
mean
duration
for
each
unique
action
over
users
and
trials
the
error
for
this
model
is
shown
in
the
md
mean
duration
columns
of
table
vi
these
errors
are
lower
than
but
still
relatively
close
to
those
produced
by
the
goms
and
act-r
models
as
percentages
of
mean
action
duration
the
models
might
improve
from
42
to
35
with
respect
to
rmse
and
from
32
to
26
for
mae
this
comparison
suggests
that
the
goms
and
act-r
models
are
performing
almost
as
well
as
is
possible
in
predicting
user
behavior
at
the
action
level
given
the
variance
in
the
user
data
2
4
discussion
all
of
the
models
we
have
presented
have
proved
robust
in
our
analysis
though
at
a
sufficiently
detailed
level
they
break
down
as
all
models
do
our
results
indicate
that
detailed
rigorous
models
of
low-level
interaction
with
cell
phones
is
possible
and
that
such
models
make
good
predictions
aside
from
the
use
of
this
work
as
a
possible
exemplar
of
the
application
of
cognitive
modeling
techniques
to
hci
evaluation
we
can
note
a
few
observations
modelers
need
to
consider
the
trade-off
between
modeling
effort
and
the
value
of
increasingly
veridical
results
the
goms
model
developed
here
is
as
good
as
or
better
than
the
act-r
model
and
was
much
cheaper
to
build
for
modeling
efficiency
a
reasonable
heuristic
is
to
apply
simple
formalisms
to
model
simple
procedures
this
is
especially
relevant
if
the
simple
formalism
can
predict
all
the
observable
information
or
all
the
needed
behavior
all
the
data
we
have
in
this
study
keystroke
times
by
expert
users
can
be
predicted
by
both
act-r
and
goms
though
in
other
situations
e
g
if
we
had
eye-tracking
data
and
wanted
to
predict
eye
movements
or
to
model
concurrent
tasks
goms
would
be
at
a
distinct
disadvantage
further
goms
offers
considerable
flexibility
in
modeling
a
coarser
formalism
does
not
necessarily
imply
stricter
constraints
on
modeling
which
is
perhaps
an
unintuitive
observation
rather
the
reverse
can
be
the
case
in
our
goms
model
for
example
the
specific
ordering
of
decision
steps
as
shown
in
figure
2
is
not
governed
by
cognitive
constraints
a
different
ordering
e
g
one
that
tested
whether
an
ok
key
press
was
appropriate
before
rather
than
after
scrolling
would
have
produced
different
predictions
it
turns
out
in
our
case
that
user
behavior
is
sufficiently
regular
that
the
goms
model
we
developed
for
a
single
user
s
behavior
generalized
very
well
to
a
larger
sample
if
this
had
not
been
the
case
the
modeling
flexibility
we
describe
would
not
have
been
helpful
our
act-r
model
for
the
same
task
does
not
allow
such
direct
fine-tuning
to
be
carried
out
in
the
same
way
because
of
tighter
architectural
constraints
on
the
interactions
between
visual
and
motor
actions
the
remaining
differences
between
the
models
predictions
and
the
data
suggest
further
improvements
to
the
models
are
possible
most
importantly
the
comparison
in
figure
8
shows
that
only
the
act-r
model
starts
to
account
for
the
faster
second
keystroke
and
none
of
the
models
predict
this
or
the
later
changes
very
well
there
are
limitations
to
this
work
so
far
aside
from
model
performance
for
example
many
cell
phones
have
additional
interaction
features
such
as
shortcut
menus
and
non-linear
graphical
icon
displays
that
are
not
captured
by
the
models
we
have
built
further
studies
perhaps
extending
to
include
novice
users
could
take
error
types
and
error
distributions
into
account
to
help
extend
the
range
of
application
of
these
models
we
believe
nevertheless
that
our
work
lays
out
clear
directions
for
future
research
one
issue
we
have
begun
to
explore
is
the
performance
differences
between
the
goms
and
actr
models
as
can
be
seen
in
the
evolution
of
cognitive
modeling
architectures
such
as
act-r
and
epic
kieras
and
meyer
1997
there
is
considerable
overlap
in
basic
assumptions
about
the
way
that
perceptual-motor
constraints
should
be
modeled
byrne
2001
kieras
2002
and
so
it
is
not
unreasonable
that
the
models
produce
similar
predictions
nevertheless
because
act-r
represents
behavior
at
a
greater
level
of
detail
than
goms
the
act-r
model
is
capable
of
more
detailed
performance
predictions
than
the
goms
model
that
goms
outperforms
act-r
in
some
areas
of
our
study
is
disappointing
from
a
cognitive
modeling
standpoint
but
not
entirely
unexpected
for
the
reasons
described
above
further
the
models
were
developed
independently
of
each
other
and
different
modeling
paradigms
and
modelers
can
lead
to
different
opportunities
for
errors
in
modeling
to
occur
ritter
1991
there
has
been
recent
work
toward
automatically
translating
between
models
at
different
levels
of
abstraction
which
would
help
reduce
or
at
least
formalize
such
errors
but
this
research
is
in
its
early
stages
john
et
al
2004
st
amant
et
al
2004a
ritter
et
al
2006
salvucci
and
lee
2003
3
user
profiles
and
search
once
models
of
menu
traversal
have
been
built
the
models
can
be
applied
toward
improving
menu
hierarchies
so
that
end
users
can
traverse
menus
more
quickly
this
is
a
key
concern
for
developers
who
may
be
less
interested
in
modeling
theory
or
model
development
than
in
the
pragmatic
issues
of
increasing
usability
an
evaluation
of
a
menu
hierarchy
independent
of
usage
patterns
would
be
uninformative
different
users
choose
different
items
and
items
are
chosen
with
varying
frequency
in
other
words
different
usage
patterns
favor
different
designs
we
define
a
user
profile
to
be
a
probability
distribution
over
the
set
of
terminal
items
in
a
menu
hierarchy
that
specifies
the
probability
of
each
terminal
being
chosen
relative
to
the
entire
set
each
user
profile
is
also
associated
with
the
frequency
that
the
menu
system
is
accessed
for
the
entire
population
of
users
of
the
menu
hierarchy
there
may
be
many
different
user
profiles
some
more
common
than
others
a
distribution
captured
by
the
coverage
of
individual
profiles
as
an
example
imagine
that
20
of
the
users
of
a
given
cell
phone
access
only
two
items
recent
calls
and
view
all
contacts
each
on
average
twice
a
day
in
the
probability
distribution
of
the
profile
for
this
set
of
users
these
two
items
have
probability
0
5
and
all
others
have
0
0
the
coverage
of
the
profile
is
0
20
and
its
frequency
is
4
a
value
that
becomes
meaningful
in
the
context
of
the
per-day
usage
values
of
other
profiles
in
formal
terms
the
design
problem
involves
the
construction
of
a
mapping
in
the
form
of
a
hierarchical
ordering
h
between
t
the
set
of
terminal
menu
items
and
u
the
set
of
all
user
profiles
defined
on
t
a
reasonable
evaluation
measure
for
a
given
menu
hierarchy
h
is
its
efficiency
the
expected
cost
of
reaching
a
terminal
item
this
turns
out
to
be
straightforward
to
represent
expected
cost
is
given
by
where
p
t
is
the
probability
of
the
occurrence
of
a
specific
terminal
t
and
ch
t
is
the
cost
of
reaching
terminal
t
in
hierarchy
h
in
some
situations
it
may
be
possible
to
estimate
p
t
directly
through
usage
statistics
across
user
profiles
this
would
mean
maintaining
a
local
log
of
menu
selections
on
individual
cell
phones
to
be
uploaded
opportunistically
to
a
central
repository
or
making
these
local
actions
visible
remotely
as
they
are
carried
out
if
this
is
not
practical
due
to
storage
or
bandwidth
constraints
an
alternative
is
possible
we
can
express
the
probability
p
t
as
follows
that
is
the
probability
of
the
occurrence
of
t
is
the
conditional
probability
of
its
occurrence
in
a
specific
user
profile
u
scaled
by
the
probability
of
u
and
summed
over
all
user
profiles
the
conditional
probability
p
t
u
is
given
by
the
distribution
associated
with
each
user
profile
as
described
above
values
for
p
u
can
be
estimated
from
the
coverage
and
frequency
of
a
profile
at
the
time
the
profile
is
assigned
to
a
user
in
practice
we
can
imagine
individual
users
being
asked
questions
about
their
cell
phone
usage
when
they
are
assigned
to
a
specific
user
profile
how
often
they
will
access
their
cell
phone
s
menu
system
and
the
types
of
functions
they
expect
to
use
the
trade-off
compared
with
direct
sampling
of
p
t
is
between
accuracy
and
resource
demands
all
that
remains
is
to
define
a
specific
cost
function
ch
which
we
can
do
with
our
study
results
for
pragmatic
reasons
we
use
the
easiest
metric
available
to
compute
cost
the
linear
regression
given
in
eq
2
the
goms
or
act-r
model
could
have
been
used
with
comparable
accuracy
but
with
a
significant
increase
in
processing
time
the
factors
that
make
the
linear
regression
less
appropriate
for
modeling
do
not
apply
here
our
choice
for
ch
means
that
ec
h
produces
the
expected
duration
of
choosing
an
arbitrary
terminal
menu
item
in
hierarchy
h
this
measure
can
be
used
by
an
automated
search
algorithm
to
identify
alternative
designs
of
the
menu
hierarchy
that
improve
user
performance
a
complication
is
that
the
automated
modification
of
a
menu
hierarchy
cannot
arbitrarily
rearrange
structure
purely
for
efficiency
changes
should
respect
the
semantic
relationships
between
the
items
that
is
the
item
ringer
volume
is
under
the
settings
category
rather
than
vice-versa
for
good
reason
to
avoid
the
difficulties
of
representing
and
reasoning
about
menu
item
semantics
we
leave
this
for
future
work
we
rely
on
two
search
operators
that
produce
only
small
changes
for
a
terminal
item
with
non-zero
probability
these
operators
can
be
applied
--
promote
item
moves
an
item
to
the
beginning
of
its
menu
list
to
reduce
scrolling
time
--
promote
subtree
moves
an
ancestor
of
the
item
up
one
level
in
the
hierarchy
to
reduce
the
number
of
intermediate
items
that
must
be
selected
to
reach
the
terminal
an
item
or
subtree
rooted
at
an
ancestor
may
only
be
promoted
once
even
with
these
constraints
the
search
space
size
is
exponential
in
the
number
of
target
items
with
non-zero
probability
in
any
profile
e
g
if
all
non-zero
items
in
a
user
profile
are
in
one
menu
list
then
all
permutations
of
these
items
will
be
considered
exhaustive
search
is
thus
impractical
for
the
phone
hierarchy
shown
in
table
i
for
just
the
menu
containing
12
items
mentioned
in
section
1
half
a
billion
permutations
are
possible
a
best-first
search
algorithm
however
gives
good
results
after
as
few
as
100
steps
3
1
results
ideally
we
would
be
able
to
validate
the
search
procedure
based
on
real
user
profiles
found
in
the
most
commonly
used
cell
phones
we
have
been
unable
to
acquire
such
data
unfortunately
lacking
real
cell
phone
user
profiles
we
can
only
illustrate
the
search
procedure
in
practice
but
our
results
are
promising
based
on
the
kyocera
menu
hierarchy
we
defined
random
profiles
of
different
sizes
where
size
refers
to
the
number
of
non-zero
probability
menu
items
contained
in
the
profile
the
probabilities
for
each
profile
were
drawn
from
a
uniform
random
distribution
and
normalized
because
these
profiles
were
randomly
generated
we
used
only
a
single
profile
for
the
search
rather
than
composing
arbitrary
probabilities
from
different
random
profiles
these
profiles
approximate
profiles
for
spreadsheet
usage
napier
et
al
1992
and
modeling
languages
nichols
and
ritter
1995
table
vii
shows
the
results
for
user
profiles
of
size
20
30
and
40
terminals
in
each
case
10
different
random
profiles
were
generated
for
each
size
and
a
best-first
search
bounded
at
500
steps
was
applied
to
produce
improvements
the
cost
values
are
means
of
the
time
estimates
produced
by
the
linear
model
the
last
column
gives
the
time
savings
in
traversing
the
reordered
menus
as
a
percentage
of
the
duration
of
the
traversals
in
the
original
menu
hierarchy
because
these
results
are
based
on
random
probabilities
of
accessing
menu
items
rather
than
actual
user
experiences
they
can
only
be
viewed
as
suggestive
anecdotal
evidence
from
industry
contacts
indicates
that
performing
usability
studies
on
menu
hierarchies
is
not
common
practice
we
expect
that
with
improvements
in
data
collection
however
this
approach
may
help
to
make
cell
phones
more
efficient
in
the
future
targets
for
future
research
include
examining
the
plausibility
of
a
uniform
distribution
for
selectable
menu
items
in
user
profiles
more
efficient
search
to
optimize
menu
layouts
application
to
other
types
of
menu
layouts
and
the
inclusion
of
other
factors
e
g
profile
size
in
cost
computations
3
2
discussion
we
have
presented
formulas
and
a
search
algorithm
to
show
how
menu
efficiency
can
be
improved
by
about
a
third
the
modifications
to
the
menu
hierarchy
produced
by
the
search
have
the
effect
of
reducing
the
depth
of
the
hierarchy
and
increasing
the
length
of
individual
menus
this
was
a
simple
change
but
clearly
one
that
could
be
applied
to
at
least
one
commercially
available
phone
it
could
plausibly
be
applied
to
other
systems
with
similar
menu
structures
the
general
approach
laid
out
in
this
section
is
related
to
two
areas
of
hci
other
than
cognitive
modeling
both
of
which
provide
opportunities
for
further
research
the
first
area
is
adaptive
user
interfaces
the
issue
of
finding
the
best
menu
hierarchy
for
a
given
user
profile
is
separate
from
that
of
deciding
when
the
menu
structure
should
be
put
in
place
our
discussion
in
this
section
assumes
that
a
static
hierarchy
is
associated
with
each
user
profile
even
if
new
usage
data
were
to
become
available
over
time
if
such
data
were
recorded
over
time
for
individual
users
then
a
new
search
could
be
carried
out
incrementally
to
find
improved
menu
hierarchies
this
function
should
not
be
performed
lightly
but
one
now
quite
real
possibility
is
to
treat
the
automated
adaptation
of
the
menu
hierarchy
as
a
customization
option
that
users
can
select
at
their
own
discretion
whenever
they
choose
it
should
also
be
possible
to
incorporate
a
theory
of
learning
that
could
predict
when
to
do
this
and
the
costs
involved
in
learning
the
new
menu
structure
the
second
related
area
is
support
for
navigation
a
menu
hierarchy
is
a
small
restricted
information
space
in
comparison
with
other
spaces
such
as
the
world
wide
web
the
modifications
explored
by
the
search
procedure
are
only
a
small
subset
of
possible
transformations
that
might
be
applied
to
an
interface
nevertheless
some
of
the
same
conceptual
issues
apply
to
the
analysis
of
navigation
in
general
for
example
usage
frequency
could
be
used
for
improving
navigation
on
a
web
site
by
promoting
links
upward
toward
the
site
entry
page
and
move
specific
links
closer
to
the
top
of
their
pages
ritter
et
al
2005
in
practice
the
most
effective
approach
to
navigation
redesign
addresses
the
semantics
of
the
information
space
rather
than
focusing
only
on
its
surface
organization
and
presentation
young
1998
for
menu
hierarchy
modification
this
implies
that
greater
potential
benefits
can
be
gained
from
examining
the
semantic
relationships
between
menu
categories
and
menu
items
than
their
ordering
the
most
relevant
research
along
these
lines
is
pirolli
s
work
on
optimalforaging
theory
and
information
scent
pirolli
1997
2003
optimal-foraging
theory
explains
behavior
adaptations
in
terms
of
resource
availability
and
constraints
in
its
application
to
menu
navigation
information
scent
is
a
metaphor
for
visible
semantic
cues
that
lead
users
to
information
they
seek
pirolli
has
developed
an
extension
of
act-r
called
act-if
to
evaluate
a
foraging
model
of
information
navigation
act-if
relies
on
a
spreading
activation
network
to
capture
associations
in
memory
processing
the
models
described
in
our
article
are
based
on
the
assumption
that
associations
between
menu
items
such
as
sounds
and
ringer
volume
can
be
directly
retrieved
from
memory
by
an
expert
user
a
more
general
model
based
on
act-if
might
be
able
to
explain
the
strength
of
these
associations
based
on
measures
of
semantic
distance
with
such
flexibility
in
representation
it
would
be
possible
to
explore
additional
modeling
issues
such
as
how
novice
users
might
traverse
an
unfamiliar
menu
hierarchy
which
paths
through
the
hierarchy
are
more
likely
to
result
in
errors
and
how
renaming
or
recategorizing
menu
items
could
influence
navigation
performance
more
than
just
reordering
4
conclusion
in
this
article
we
have
described
a
set
of
evaluation
concepts
and
tools
to
support
cell
phone
menu
design
the
goms
model
is
able
to
predict
user
performance
very
well
the
act-r
model
performs
almost
as
well
it
took
more
effort
to
create
but
also
provide
more
detailed
predictions
and
could
be
used
for
a
wider
range
of
analyses
although
our
work
has
relied
on
a
simpler
performance
model
both
of
these
models
could
be
used
by
a
simple
efficient
algorithm
to
optimize
the
redesign
of
cell
phone
menus
the
redesign
could
let
users
on
average
perform
their
tasks
about
30
faster
based
on
plausible
assumptions
about
usage
this
menu
redesign
approach
is
simple
we
believe
it
is
simple
enough
to
be
taught
to
and
used
by
designers
this
approach
is
based
on
knowing
users
through
the
models
and
knowing
their
tasks
in
its
simplest
form
the
approach
is
to
reorder
the
menu
items
to
put
the
most
commonly
used
tasks
earlier
and
higher
in
the
hierarchy
where
users
task
frequencies
are
not
known
or
vary
widely
between
users
it
appears
reasonable
to
allow
the
system
to
reorder
itself
upon
a
user
s
request
after
a
sufficient
break-in
period
of
course
the
semantics
of
the
task
and
the
semantics
of
the
task
titles
will
have
a
role
to
play
as
well
which
we
did
not
explore
here
others
are
working
with
act-r
to
create
models
that
start
to
take
account
of
this
aspect
of
interaction
pirolli
2003
these
models
and
the
optimization
algorithm
bring
together
several
interesting
aspects
of
human
behavior
and
show
how
a
simple
ai
algorithm
can
help
in
hci
design
it
also
gives
rise
to
both
theoretical
and
practical
implications
theoretically
novice
user
actions
learning
error
recovery
behavior
performance
under
stress
and
generality
across
different
devices
are
now
areas
ripe
for
further
exploration
having
the
models
in
hand
also
let
us
explore
and
explain
new
regularities
in
user
behavior
such
as
the
variations
in
key
press
time
shown
in
figure
8
from
a
practical
standpoint
developers
have
models
that
are
ready
for
use
--
these
models
are
general
enough
that
they
do
not
require
cognitive
modeling
expertise
or
programming
skill
to
apply
them
to
different
traversal
tasks
in
different
menu
hierarchies
or
on
different
cell
phones
our
longer-term
goals
for
this
research
include
the
application
of
modeling
techniques
to
provide
insights
into
usability
issues
nichols
and
ritter
1995
and
the
development
of
better
cognitive
modeling
tools
for
evaluating
and
designing
more
general
classes
of
user
interfaces
ritter
et
al
2006
st
amant
et
al
2004a
we
believe
that
as
modeling
concepts
and
techniques
become
more
accessible
to
hci
developers
they
will
become
increasingly
significant
in
their
contribution
to
improving
user
interfaces
wide
application
of
the
menu
design
approach
in
this
article
could
for
example
save
significant
amounts
of
time
if
2
billion
users
were
to
use
their
cell
phone
menus
every
day
for
just
three
seconds
our
improvements
could
save
almost
30
years
of
user
time
per
day
